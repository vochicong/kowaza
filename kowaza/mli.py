# AUTOGENERATED! DO NOT EDIT! File to edit: 01_shap.ipynb (unless otherwise specified).

__all__ = ['logit', 'expit', 'Shap']

# Cell
import numpy as np


def logit(p):
    """ Compute log-odds of p """
    assert 0 < p < 1
    return log(p / 1 - p)


def expit(a):
    p = 1 / (1 + np.exp(-a))
    assert 0 < p < 1
    return p

# Cell
from fastcore.basics import store_attr
import shap


class Shap:
    """ Fit a model for X, y, then explain it using SHAP plots """

    def __init__(self, X, y, model, n_samples=1000):
        store_attr()

        model.fit(X, y)

        self.samples = samples = X.iloc[:n_samples]
        self.explainer = shap.Explainer(model, samples)
        self.shap_values = self.explainer(samples)

    def force_plot(self, n_plots=1):
        """ Display a SHAP force plot """
        plot = shap.force_plot(
            self.explainer.expected_value,
            self.shap_values.values[:n_plots],
            self.samples.iloc[:n_plots],
            link="logit",
        )
        return plot

    def waterfall_plot(self, id: int):
        """ Display SHAP waterfall plot """
        plot = shap.plots.waterfall(self.shap_values[id])
        return plot

    def bar_plot(self, id: int):
        """ Display shap values in a bar plot """
        import pandas as pd

        df = pd.DataFrame(
            dict(
                shap=self.shap_values[id].values,
                shap_abs=abs(self.shap_values[id].values),
            ),
            index=[
                f"{v} = {n}" for n, v in zip(self.X.columns, self.shap_values[id].data)
            ],
        )
        plot = df.sort_values("shap_abs", ascending=False).plot.bar(y="shap")
        return plot
